# INIT AGENT

sp {propose*init-agent
    (state <s> ^superstate nil
              -^name)
-->
    (<s> ^operator.name init-agent)
}

sp {apply*init-agent
    (state <s> ^operator.name init-agent)
-->
    (<s> ^name fake-rosie
         ^prefs <prefs>)
    (<prefs> ^check-answer 10
             ^try-combo 20
             ^create-combo 30
             ^find-next-rank 40
             ^exact-search 20
             ^give-up 100)
}

# STORE

sp {fake-rosie*propose*store
    (state <s> ^name fake-rosie
               ^io.input-link <il>
               ^smem <smem>)
    (<il> ^params.memory smem
         -^stage quiz)
    (<smem> ^command <scmd>)
   -{
       (<scmd> ^store <store>)
       (<smem> ^result.success <store>)
    }
-->
    (<s> ^operator.name store)
}

sp {fake-rosie*apply*store*store
    (state <s> ^name fake-rosie
               ^operator.name store
               ^smem.command <scmd>
               ^io.input-link <il>)
    (<il> ^time <time>
          ^red <red>
          ^green <green>
          ^blue <blue>
          ^color <color>
          ^diameter <diameter>
          ^size <size>
          ^shape <shape>)
-->
    (<scmd> ^store <store>)
    (<store> ^time <time>
             ^red <red>
             ^green <green>
             ^blue <blue>
             ^color <color>
             ^diameter <diameter>
             ^size <size>
             ^shape <shape>)
}

# NEXT

sp {fake-rosie*propose*next
    (state <s> ^name fake-rosie
               ^io.input-link <il>)
    (<il> ^stage learn
          ^time <time>)
-->
    (<s> ^operator <op> + <)
    (<op> ^name next)
}

sp {fake-rosie*apply*next*remove-smem-store
    (state <s> ^name fake-rosie
               ^operator.name next
               ^smem.command <scmd>)
    (<scmd> ^store <store>)
-->
    (<scmd> ^store <store> -)
}

sp {fake-rosie*apply*next
    (state <s> ^name fake-rosie
               ^operator.name next
               ^io.output-link <ol>)
-->
    (<ol> ^next <dummy>)
}


# FAKE-ROSIE :: DIRECT-QUERY

sp {fake-rosie*propose*direct-query
    (state <s> ^name fake-rosie
               ^io.input-link <il>
              -^tried-naive)
    (<il> ^stage quiz
         -^params.strategy heuristic)
-->
    (<s> ^operator.name direct-query)
}

sp {fake-rosie*elaborate*direct-query
    (state <s> ^name fake-rosie
               ^operator <op> +
               ^io.input-link <il>)
    (<op> ^name direct-query)
    (<il> ^{<attr> <> stage <> params} <val>)
-->
    (<op> ^<attr> <val>)
}

sp {fake-rosie*apply*direct-query*done
    (state <s> ^name fake-rosie
               ^operator.name direct-query
               ^<mem> <mem-link>
               ^io.input-link <il>)
    (<il> ^params.memory <mem>)
    (<mem-link> ^command.query <qry>
                ^result.<result> <qry>)
-->
    (<s> ^tried-naive yes)
}

# DIRECT-QUERY

sp {apply*direct-query*smem*create-query
    (state <s> ^operator.name direct-query
               ^io.input-link.params.memory smem
               ^smem.command <scmd>)
    (<scmd> -^query)
-->
    (<scmd> ^query <sqry>)
}

sp {apply*direct-query*smem*add-query-terms
    (state <s> ^operator <op>
               ^io.input-link.params.memory smem
               ^smem.command.query <sqry>)
    (<op> ^name direct-query
          ^{<attr> <> name} <val>)
-->
    (<sqry> ^<attr> <val>)
}

sp {apply*direct-query*epmem*create-query
    (state <s> ^operator.name direct-query
               ^io.input-link.params <params>
               ^epmem.command <ecmd>)
    (<params> ^memory epmem
              ^num-objects <num-objects>)
    (<ecmd> -^query)
-->
    (<ecmd> ^query.io.input-link <eil>
            ^before (+ <num-objects> 3)
            ^after 1)
    (<eil> ^stage learn)
}

sp {apply*direct-query*epmem*add-query-terms
    (state <s> ^operator <op>
               ^io.input-link.params.memory epmem
               ^epmem.command.query.io.input-link <eqry>)
    (<op> ^name direct-query
          ^{<attr> <> name} <val>)
-->
    (<eqry> ^<attr> <val>)
}

# CHECK-ANSWER

sp {fake-rosie*propose*check-answer*smem
    (state <s> ^name fake-rosie
               ^smem <smem>
               ^io <io>
               ^tried-naive)
    (<io> ^input-link.params <params>
         -^output-link.check.time <time>)
    (<params> ^memory smem
             -^strategy heuristic)
    (<smem> ^command.query <qry>
            ^result <res>)
    (<res> ^success <qry>
           ^retrieved.time <time>)
-->
    (<s> ^operator <op> +)
    (<op> ^name check-answer
          ^time <time>)
}

sp {fake-rosie*propose*check-answer*epmem
    (state <s> ^name fake-rosie
               ^epmem <epmem>
               ^io <io>
               ^tried-naive)
    (<io> ^input-link.params <params>
         -^output-link.check.time <time>)
    (<params> ^memory epmem
             -^strategy heuristic)
    (<epmem> ^command.<< query retrieve >> <qry>
             ^result <res>)
    (<res> ^retrieved.io.input-link.time <time>)
-->
    (<s> ^operator <op> +)
    (<op> ^name check-answer
          ^time <time>)
}

sp {fake-rosie*apply*check-answer
    (state <s> ^operator <op>
               ^io.output-link <ol>)
    (<op> ^name check-answer
          ^time <time>)
-->
   (<ol> ^check.time <time>)
}


sp {fake-rosie*apply*check-answer*remove-incorrect
    (state <s> ^operator <op>
               ^io.output-link <ol>)
    (<op> ^name check-answer
          ^time <time>)
    (<ol> ^check <prev>)
    (<prev> ^time {<> <time>}
            ^status incorrect)
-->
    (<ol> ^check <prev> -)
}

# EXACT-SEARCH

sp {fake-rosie*propose*exact-search
    (state <s> ^name fake-rosie
               ^tried-naive
               ^io.input-link.params.strategy exact)
-->
    (<s> ^operator.name exact-search)
}

sp {fake-rosie*apply*exact-search*failure
    (state <s> ^name fake-rosie
               ^operator.name exact-search
               ^<mem> <mem-link>
               ^io <io>)
    (<io> ^input-link.params.memory <mem>
          ^output-link <ol>)
    (<mem-link> ^command.query <qry>
                ^result.failure <qry>)
-->
   (<ol> ^give-up <dummy>)
}

sp {fake-rosie*apply*exact-search*incorrect
    (state <s> ^name fake-rosie
               ^operator.name exact-search
               ^io.output-link <ol>)
    (<ol> ^check.status incorrect)
-->
    (<ol> ^give-up <dummy>)
}

# SMEM-EXHAUSTIVE

sp {fake-rosie*propose*smem-exhaustive*failure
    (state <s> ^name fake-rosie
               ^tried-naive
               ^smem.result.failure
               ^io.input-link.params <params>)
    (<params> ^strategy exhaustive
              ^memory smem)
-->
    (<s> ^operator.name smem-exhaustive)
}

sp {fake-rosie*propose*smem-exhaustive*incorrect
    (state <s> ^name fake-rosie
               ^tried-naive
               ^smem.result.retrieved.time <time>
               ^io <io>)
    (<io> ^input-link.params <params>
          ^output-link.check <check>)
    (<params> ^strategy exhaustive
              ^memory smem)
    (<check> ^time <time>
             ^status incorrect)
-->
    (<s> ^operator.name smem-exhaustive)
}

sp {fake-rosie*apply*smem-exhaustive*genericize-query
    (state <s> ^name fake-rosie
               ^operator.name smem-exhaustive
               ^smem <smem>
               ^io <io>)
    (<io> ^input-link.<attr> <val>
          ^output-link <ol>)
    (<smem> ^command.query <sqry>
            ^result.failure <sqry>)
    (<sqry> ^<attr> <val>)
-->
    (<sqry> ^<attr> <val> -
            ^<attr> <dummy>)
}

sp {fake-rosie*apply*smem-exhaustive*prohibit
    (state <s> ^name fake-rosie
               ^operator.name smem-exhaustive
               ^smem <smem>
               ^io.output-link <ol>)
    (<ol> ^check <answer>)
    (<answer> ^time <time>
              ^status incorrect)
    (<smem> ^command <scmd>
            ^result <sres>)
    (<sres> ^retrieved <retrieved>
            ^success)
-->
    (<scmd> ^prohibit <retrieved>)
    (<ol> ^check <answer> -)
}

# EPMEM-EXHAUSTIVE

sp {fake-rosie*propose*epmem-exhaustive-first*incorrect
    (state <s> ^name fake-rosie
               ^tried-naive
               ^epmem <epmem>
               ^io <io>)
    (<epmem> ^command.after
             ^result.retrieved.io.input-link.time <time>)
    (<io> ^input-link.params <params>
          ^output-link.check <check>)
    (<params> ^strategy exhaustive
              ^memory epmem)
    (<check> ^time <time>
             ^status incorrect)
-->
    (<s> ^operator.name epmem-exhaustive-first)
}

sp {fake-rosie*apply*epmem-exhaustive-first
    (state <s> ^name fake-rosie
               ^operator.name epmem-exhaustive-first
               ^io <io>
               ^epmem.command <ecmd>)
    (<io> ^input-link.params.num-objects <num-objects>
          ^output-link <ol>)
    (<ol> ^check <prev>)
    (<ecmd> ^query <qry>
            ^before <before>
            ^after <after>)
    (<prev> ^status incorrect)
-->
    (<ol> ^check <prev> -)
    (<ecmd> ^query <qry> -
            ^before <before> -
            ^after <after> -
            ^retrieve (+ <num-objects> 2))
}

sp {fake-rosie*propose*epmem-exhaustive-next*incorrect
    (state <s> ^name fake-rosie
               ^tried-naive
               ^epmem <epmem>
               ^io <io>)
    (<epmem> ^command.retrieve {> 2}
             ^result.retrieved.io.input-link.time <time>)
    (<io> ^input-link.params <params>
          ^output-link.check <check>)
    (<params> ^strategy exhaustive
              ^memory epmem)
    (<check> ^time <time>
             ^status incorrect)
-->
    (<s> ^operator.name epmem-exhaustive-next)
}

sp {fake-rosie*apply*epmem-exhaustive-next
    (state <s> ^name fake-rosie
               ^operator.name epmem-exhaustive-next
               ^io <io>
               ^epmem.command <ecmd>)
    (<io> ^input-link.params.num-objects <num-objects>
          ^output-link <ol>)
    (<ol> ^check <prev>)
    (<ecmd> ^retrieve <ep-num>)
    (<prev> ^status incorrect)
-->
    (<ol> ^check <prev> -)
    (<ecmd> ^retrieve <ep-num> -
            ^retrieve (- <ep-num> 1))
}

# HEURISTIC-SEARCH

sp {fake-rosie*propose*heuristic-search
    (state <s> ^name fake-rosie
               ^io.input-link <io>)
    (<io> ^stage quiz
          ^params.strategy heuristic)
-->
    (<s> ^operator.name heuristic-search)
}

sp {fakerose*elaborate*heuristic-search
    (state <s> ^name fake-rosie
               ^operator <op> +
               ^io.input-link <il>)
    (<op> ^name heuristic-search)
    (<il> ^{<attr> <> stage <> params} <val>)
-->
    (<op> ^<attr> <val>)
}

sp {heuristic*elaborate*initialize-options
    (state <s> ^name heuristic-search
               ^superstate.operator <sop>)
    (<sop> ^size <size>
           ^color <color>)
-->
    (<s> ^options <options>
         ^combos <combos>)
    (<options> ^size.option <orig-size>
               ^color.option <orig-color>)
    (<orig-size> ^type size
                 ^item <size>
                 ^prev <size-dummy>
                 ^rank 0)
    (<orig-color> ^type color
                 ^item <color>
                 ^prev <color-dummy>
                 ^rank 0)
}

# HEURISTIC :: CHECK-ANSWER

sp {heuristic*propose*check-answer
    (state <s> ^name heuristic-search
               ^combos.combo <combo>)
    (<combo> ^success <success>)
    (<success> ^time <time>
              -^checked)
-->
    (<s> ^operator <o> +)
    (<o> ^name check-answer
         ^time <time>)
}

sp {heuristic*apply*check-answer*incorrect
    (state <s> ^name heuristic-search
               ^operator.name check-answer
               ^io.output-link.check <check>
               ^combos.combo.success <success>)
    (<check> ^time <time>
             ^status incorrect)
    (<success> ^time <time>)
-->
    (<success> ^checked yes)
}

# HEURISTIC :: TRY-COMBO

sp {heuristic*propose*try-combo
    (state <s> ^name heuristic-search
               ^combos.combo <combo>)
    (<combo> -^failed)
-->
    (<s> ^operator <o> +)
    (<o> ^name try-combo
         ^combo <combo>)
}

sp {heuristic*prefer*try-combo*lower-rank
    (state <s> ^name heuristic-search
               ^operator <o1> +
               ^operator <o2> +)
    (<o1> ^name try-combo
          ^combo.combined-rank <rank1>)
    (<o2> ^name try-combo
          ^combo.combined-rank {> <rank1>})
-->
    (<s> ^operator <o1> > <o2>)
}

sp {heuristic*prefer*try-combo*equal-rank
    (state <s> ^name heuristic-search
               ^operator <o1> +
               ^operator <o2> +)
    (<o1> ^name try-combo
          ^combo.combined-rank <rank1>)
    (<o2> ^name try-combo
          ^combo.combined-rank <rank1>)
-->
    (<s> ^operator <o1> = <o2>)
}

# HEURISTIC :: TRY-COMBO :: DIRECT-QUERY

sp {try-combo*propose*direct-query
    (state <s> ^name try-combo
               ^superstate.operator.combo.terms <terms>)
    (<terms> ^size <size>
             ^color <color>)
-->
    (<s> ^operator <op> +)
    (<op> ^name direct-query
          ^size <size>
          ^color <color>)
}

sp {try-combo*propose*direct-query*prohibit
    (state <s> ^name try-combo
               ^operator.name direct-query
               ^io.input-link.params.memory <mem>
               ^<mem>.command <cmd>
               ^superstate.operator <sop>)
    (<sop> ^combo.success.mem-id <mem-id>)
-->
    (<cmd> ^prohibit <mem-id>)
}

sp {try-combo*apply*direct-query*smem-success
    (state <s> ^name try-combo
               ^operator.name direct-query
               ^superstate.operator.combo <combo>
               ^io.input-link.params.memory smem
               ^smem <smem>)
    (<smem> ^command.query <sqry>
            ^result <sres>)
    (<sres> ^success <sqry>
            ^retrieved <lti>)
    (<lti> ^time <time>)
-->
    (<combo> ^success <success>)
    (<success> ^mem-id <lti>
               ^time <time>)
}

sp {try-combo*apply*direct-query*epmem-success
    (state <s> ^name try-combo
               ^operator.name direct-query
               ^superstate.operator.combo <combo>
               ^io.input-link.params.memory epmem
               ^epmem <epmem>)
    (<epmem> ^command.query <eqry>
             ^result <eres>)
    (<eres> ^success <sqry>
            ^memory-id <epnum>
            ^graph-match 1
            ^retrieved.io.input-link <eil>)
    (<eil> ^time <time>)
-->
    (<combo> ^success <success>)
    (<success> ^mem-id <epnum>
               ^time <time>)
}

sp {try-combo*apply*direct-query*epmem-failure
    (state <s> ^name try-combo
               ^operator.name direct-query
               ^superstate.operator.combo <combo>
               ^io.input-link.params.memory epmem
               ^epmem <epmem>)
    (<epmem> ^command.query <eqry>
             ^result <eres>)
    (<eres> ^success <sqry>
            ^graph-match 0)
-->
    (<combo> ^failed yes)
}

sp {try-combo*apply*direct-query*failure
    (state <s> ^name try-combo
               ^operator.name direct-query
               ^superstate.operator.combo <combo>
               ^io.input-link.params.memory <mem>
               ^<mem> <mem-link>)
    (<mem-link> ^command.query <sqry>
                ^result.failure <sqry>)
-->
    (<combo> ^failed yes)
}

# HEURISTIC :: CREATE-COMBO

sp {heuristic*propose*create-combo
    (state <s> ^name heuristic-search
               ^options <options>
               ^combos <combos>)
    (<options> ^size.option <size-option>
               ^color.option <color-option>)
    (<size-option> ^item <size>
                   ^rank <size-rank>)
    (<color-option> ^item <color>
                    ^rank <color-rank>)
   -{
        (<combos> ^combo.terms <terms>)
        (<terms> ^size <size>
                 ^color <color>)
    }
-->
    (<s> ^operator <op> +)
    (<op> ^name create-combo
          ^size <size>
          ^color <color>
          ^combined-rank (+ <size-rank> <color-rank>))
}

sp {heuristic*prefer*create-combo
    (state <s> ^name heuristic-search
               ^operator <o1> +
               ^operator <o2> +)
    (<o1> ^name create-combo)
    (<o2> ^name create-combo)
-->
    (<s> ^operator <o1> = <o2>)
}

sp {heuristic*apply*create-combo
    (state <s> ^name heuristic-search
               ^operator <op>
               ^combos <combos>)
    (<op> ^name create-combo
          ^size <size>
          ^color <color>
          ^combined-rank <combined-rank>)
-->
    (<combos> ^combo <combo>)
    (<combo> ^terms <terms>
             ^combined-rank <combined-rank>)
    (<terms> ^size <size>
             ^color <color>)
}

# HEURISTIC :: FIND-NEXT-RANK

sp {heuristic*propose*find-next-rank
    (state <s> ^name heuristic-search
               ^io.input-link.params.depth <depth>
               ^options.<type> <type-options>)
    (<type-options> ^option <option>
                   -^option.prev <item>)
    (<option> ^item <item>
              ^rank {< <depth>})
-->
    (<s> ^operator <op> + =)
    (<op> ^name find-next-rank
          ^option <option>)
}

sp {heuristic*prefer*find-next-rank*lower-rank
    (state <s> ^name heuristic-search
               ^operator <o1> +
               ^operator <o2> +)
    (<o1> ^name find-next-rank
          ^combo.combined-rank <rank1>)
    (<o2> ^name find-next-rank
          ^combo.combined-rank {> <rank1>})
-->
    (<s> ^operator <o1> > <o2>)
}

sp {heuristic*prefer*find-next-rank*equal-rank
    (state <s> ^name heuristic-search
               ^operator <o1> +
               ^operator <o2> +)
    (<o1> ^name find-next-rank
          ^combo.combined-rank <rank1>)
    (<o2> ^name find-next-rank
          ^combo.combined-rank <rank1>)
-->
    (<s> ^operator <o1> > <o2>)
}

sp {heuristic*apply*find-next-rank*init-query
    (state <s> ^name heuristic-search
               ^operator <op>
               ^smem.command <scmd>)
    (<op> ^name find-next-rank
          ^option <option>)
    (<option> ^item <item>
              ^type <type>)
-->
    (<scmd> ^query <sqry>)
    (<sqry> ^name <item>
            ^type <type>)
}

sp {heuristic*apply*find-next-rank*mark-final
    (state <s> ^name heuristic-search
               ^operator <op>
               ^superstate.operator.<type> <orig>
               ^smem <smem>
               ^options.<type> <options>)
    (<op> ^name find-next-rank
          ^option <option>)
    (<option> ^type <type>
              ^item <item>
              ^rank <rank>)
    (<smem> ^command <scmd>
            ^result.retrieved <retrieved>)
    (<scmd> ^query <sqry>)
    (<retrieved> ^name <name>
                -^<orig>)
-->
    (<scmd> ^query <sqry> -)
    (<options> ^option <new-option>)
    (<new-option> ^type <type>
                  ^prev <item>
                  ^rank (+ <rank> 1))
}


sp {heuristic*apply*find-next-rank*get-next
    (state <s> ^name heuristic-search
               ^operator <op>
               ^superstate.operator.<type> <orig>
               ^smem <smem>)
    (<op> ^name find-next-rank
          ^option.type <type>)
    (<smem> ^command <scmd>
            ^result.retrieved <retrieved>)
    (<scmd> ^query <sqry>)
    (<retrieved> ^name <name>
                 ^<orig> <lti>)
-->
    (<scmd> ^query <sqry> -
            ^retrieve <lti>)
}

sp {heuristic*apply*find-next-rank*store
    (state <s> ^name heuristic-search
               ^operator <op>
               ^smem <smem>
               ^options.<type> <options>)
    (<op> ^name find-next-rank
          ^option <option>)
    (<option> ^type <type>
              ^item <item>
              ^rank <rank>)
    (<smem> ^command <scmd>
            ^result <sres>)
    (<scmd> ^retrieve <ret>)
    (<sres> ^retrieved.name <name>
            ^success <ret>)
-->
    (<scmd> ^retrieve <ret> -)
    (<options> ^option <new-option>)
    (<new-option> ^type <type>
                  ^item <name>
                  ^prev <item>
                  ^rank (+ <rank> 1))
}

# HEURISTIC :: GIVE-UP

sp {propose*give-up
    (state <s> ^name << fake-rosie heuristic-search >>
               ^io.input-link.stage quiz)
-->
    (<s> ^operator <op> + <)
    (<op> ^name give-up)
}

sp {apply*give-up
    (state <s> ^operator.name give-up
               ^io.output-link <ol>)
-->
    (<ol> ^give-up <dummy>)
}

# HALT

sp {halt*give-up
    (state <s> ^io.output-link.give-up.status complete)
-->
    (halt)
}

sp {halt*correct
    (state <s> ^io.output-link.check.status correct)
-->
    (halt)
}

# GENERIC

sp {inherit
   (state <s> ^impasse no-change
              ^superstate <ss>)
   (<ss> ^io <io>
         ^operator.name <operator>
         ^prefs <prefs>)
-->
   (<s> ^name <operator>
        ^io <io>
        ^prefs <prefs>)
}

sp {prefer
    (state <s> ^operator <o1> +
               ^operator <o2> +
               ^prefs <prefs>)
    (<o1> ^name <name1>)
    (<o2> ^name <name2>)
    (<prefs> ^<name1> <priority1>
             ^<name2> {> <priority1>})
-->
    (<s> ^operator <o1> > <o2>)
}

sp {remove-completed-output
    (state <s> ^name fake-rosie
               ^operator.name <opname>
               ^io.output-link <ol>)
    (<ol> ^next <cmd>)
    (<cmd> ^status complete)
-->
    (<ol> ^next <cmd> - )
}
